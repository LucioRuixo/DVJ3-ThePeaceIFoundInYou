TODO
====
[Milestone 01]
	DONE -Search y Create Node by type.
[Milestone 02]
	DONE -Save Load
[Milestone 03]
	DONE -Nodes connections, edges research
	DONE -Ver bien la diferencia entre Noodle, Noodler y NoodleController (como el animator)
[Milestone 04]
	DONE -Mas Nodes connections, edges research
[Milestone 05]
	DONE -Quizas hacer un clase base NoodlesPort.
	DONE Tiene que poder bancarse varias salidas y entradas a diferentes Ports (o nodos?)
	DONE El node tiene que poder tener varios Ports de entrada y salida.
	DONE Remove port y que no esplote la data

[Milestone 06]
	DONE convertir el pack en un git plano, sin todo lo de unity.

[Milestone 07]
PROBAR en proyecto a ver que namespaces pide y zarlanga.

DONE Ver que pasa que le está seteando la posición a todos los nodos en 0,0 (race condition del constructor)
DONE Refrescar todo el noodle cuando se borra un nodo.
DONE fix, se rompía todo al remover un port.
Centrar en el diagrama al mostrar un noodle en su window.

Cachear una referencia a los nodos en los ports al hacer el Awake del Noodler, que sirva tambien para llamar desde editor asi es más rápido el uso de la tool.
Cambiar toda la nomeclatura Visual a View
Hacer que Noodle tenga su view (que vendría a ser el graphView) como tienen los nodos y los ports
Change color of selected edge

[Milestone 09]
Blackboard options
[Milestone 10]
Beautify Window header .uss

Details
On resize window reload minimap
Nicify Toolbar. Icon before all. Also, blackboard and minimap toggle.
AddToClassList("nodeView"); con eso cambiar los nodos y ya

Documentacion



-Nodo de Stat
que use StatID de ARPG.
agregarle el search de blue.

-Hacer nodos de operacion:
Suma
Resta
Multiplicacion
Estos nodos pueden recibir un nodo de valor o un nodo de stat.

-Hacer nodo de valor (float)

-Hacer que los graph sean un scriptableObject.

-Ver como calcular el resultado (Quizas hay qeu checkear el repo de ShaderGraph)

-Probar el health regen.



